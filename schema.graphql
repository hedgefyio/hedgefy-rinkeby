"""
Work on the mappings later.
✅ - DONE ❌ - NOT DONE
✅ ❌ mapping(uint256 => address[]) TicketPremiumsKey;
✅ ❌ mapping(uint256 => address[]) TicketInvestmentsKey;
✅ ❌ mapping(address => uint256[]) BuyerTicketsKey;
✅ ❌ mapping(address => uint256[]) InvestorTicketsKey;
✅ ❌ mapping(uint256 => HFEntity.Ticket) TicketsMap;
✅ ❌ mapping(uint256 => mapping(address => HFEntity.Premium)) TicketPremiumsMap;
✅ ❌ mapping(uint256 => mapping(address => HFEntity.Investment)) TicketInvestmentsMap;
✅ ❌ mapping(address => mapping(uint256 => bool)) InvestorTicketsExist;
✅ ❌ mapping(address => mapping(uint256 => bool)) BuyerTicketsExist;
✅ ❌ mapping(uint256 => uint256) TicketClaimKey;
✅ ❌ mapping(uint256 => HFEntity.Claim) ClaimsMap;
✅ ❌ mapping(uint256 => address) ClaimOwnerMap;
✅ ❌ mapping(uint256 => address) ClaimOracleMap;
✅ ❌ mapping(uint256 => HFEntity.NFT) TicketNFTMap;
✅ ❌ mapping(bytes32 => IHFBidProcess) bidProcesses;
✅ ❌ mapping(uint256=>bool) pendingRequests;
✅ ❌ mapping(address => bool) tokenMap;
✅ ❌ mapping(uint256 => HFOracleInterface) private ClaimOracleInstance;
"""
type User @entity {
  id: ID!
  investments: [Investment!]! @derivedFrom(field: "investor")
  premiums: [Premium!] @derivedFrom(field: "buyer")
  tickets: [Ticket!] @derivedFrom(field: "buyer")
  donations: [Donation!] @derivedFrom(field: "donor")
  transactions: [Transaction!] @derivedFrom(field: "user")
}

"""
Ticket detail information: HFEntity.sol
"""
type Ticket @entity {
  id: ID!
  buyer: User!
  ticketId: BigInt!
  bidProcessType: String!
  claimAmount: BigInt!
  premiumAmount: BigInt!
  authorizedAmount: BigInt!
  donatedAmount: BigInt!
  marginRatio: BigInt!
  ticketName: String!
  ticketStatus: Int!
  dates: TicketDate
  selectedBidding: Investment
  nft: NFT
  claim: Claim
  premium: Premium
}

"""
TicketDate detail information: HFEntity.sol
"""
type TicketDate @entity {
  id: ID!
  closingDate: BigInt!
  startDate: BigInt!
  endDate: BigInt!
  ticket: Ticket
}

"""
Investment detail information: HFEntity.sol
"""
type Investment @entity {
  id: ID!
  ticketId: BigInt!
  ticket: Ticket!
  investor: User!
  askingAmount: BigInt!
  earning: BigInt!
  bidProcessType: String!
  ticketName: String!
  tookPremium: Boolean
  reimbursedInvest: Boolean
  removed: Boolean
  expiredInvestAmount: BigInt!
  askingExpireDate: BigInt!
  investDate: BigInt!
}

"""
Premium detail information: HFEntity.sol
"""
type Premium @entity {
  id: ID!
  ticket: Ticket!
  buyer: User!
  askingClaimAmount: BigInt!
  askingPremiumAmount: BigInt!
  bidProcessType: String!
  ticketName: String!
  reimbursedPremium: Boolean!
}

"""
Claim detail information: HFEntity.sol
"""
type Claim @entity {
  id: ID!
  claimId: BigInt!
  ticket: Ticket!
  round: BigInt!
  claimStatus: Int!
  condition: ClaimCondition!
  isApproved: Boolean!
  lastDecisionDate: BigInt!
  oracleData: BigInt!
  roundStartDate: BigInt!
}

"""
ClaimCondition detail information: HFEntity.sol
"""
type ClaimCondition @entity {
  id: ID!
  claimType: String!
  claimConstraints: [String!]!
  claimParameters: [String!]!
  claims: [Claim!]! @derivedFrom(field: "condition")
}

"""
JuryResult detail information: HFEntity.sol
"""
type JuryResult @entity {
  id: ID!
  accept: Int!
  reject: Int!
}

"""
NFT detail information: HFEntity.sol
"""
type NFT @entity {
  id: ID!
  tokenId: BigInt!
  tokenContract: String
  tokenType: Int
  tokenUri: String
}

"""
Donation detail information: HFEntity.sol
"""
type Donation @entity {
  id: ID!
  ticket: Ticket!
  donor: User!
  amount: BigInt!
  option: String!
  refunded: Boolean
}

type Transaction @entity {
  id: ID!
  user: User!
  amount: BigInt!
  currency: String
  timestamp: BigInt!
  type: String!
  ticket: Ticket!
  status: Int!
}